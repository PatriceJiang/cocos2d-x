#pragma once
#include "base/ccConfig.h"
#if CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION

#include "cocos/scripting/js-bindings/jswrapper/SeApi.h"

extern se::Object* __jsb_cocos2d_Physics3DShape_proto;
extern se::Class* __jsb_cocos2d_Physics3DShape_class;

bool js_register_cocos2d_Physics3DShape(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_initConvexHull);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_getbtShape);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_initSphere);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_initBox);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_initCapsule);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_initCylinder);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_getShapeType);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_createBox);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_createCylinder);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_createConvexHull);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_createCapsule);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_createSphere);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DShape_Physics3DShape);

extern se::Object* __jsb_cocos2d_Physics3DObject_proto;
extern se::Class* __jsb_cocos2d_Physics3DObject_class;

bool js_register_cocos2d_Physics3DObject(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_setUserData);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_getUserData);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_getObjType);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_setPhysicsWorld);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_getWorldTransform);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_getPhysicsWorld);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_setMask);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_getCollisionCallback);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_getMask);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DObject_needCollisionCallback);

extern se::Object* __jsb_cocos2d_Physics3DRigidBody_proto;
extern se::Class* __jsb_cocos2d_Physics3DRigidBody_class;

bool js_register_cocos2d_Physics3DRigidBody(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setGravity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getFriction);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setAngularFactor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_addConstraint);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getRigidBody);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getTotalForce);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getConstraintCount);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_applyCentralForce);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setMassProps);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setFriction);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setKinematic);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setDamping);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_applyImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_isKinematic);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_applyTorque);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setCcdMotionThreshold);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setRollingFriction);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getCcdMotionThreshold);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getLinearFactor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_applyDamping);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getAngularVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_init);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_applyTorqueImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setActive);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setLinearFactor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setLinearVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getLinearVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setCcdSweptSphereRadius);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_applyForce);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setAngularVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_applyCentralImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getGravity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getRollingFriction);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setCenterOfMassTransform);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setInvInertiaDiagLocal);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_removeConstraint);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getTotalTorque);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getInvMass);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getConstraint);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getRestitution);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getCcdSweptSphereRadius);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getHitFraction);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getAngularDamping);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getInvInertiaDiagLocal);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getCenterOfMassTransform);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getAngularFactor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setRestitution);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_setHitFraction);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_getLinearDamping);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DRigidBody_Physics3DRigidBody);

extern se::Object* __jsb_cocos2d_Physics3DComponent_proto;
extern se::Class* __jsb_cocos2d_Physics3DComponent_class;

bool js_register_cocos2d_Physics3DComponent(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_syncNodeToPhysics);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_addToPhysicsWorld);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_syncPhysicsToNode);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_getPhysics3DObject);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_setPhysics3DObject);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_setSyncFlag);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_setTransformInPhysics);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_create);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_getPhysics3DComponentName);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DComponent_Physics3DComponent);

extern se::Object* __jsb_cocos2d_PhysicsSprite3D_proto;
extern se::Class* __jsb_cocos2d_PhysicsSprite3D_class;

bool js_register_cocos2d_PhysicsSprite3D(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_PhysicsSprite3D_syncNodeToPhysics);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_PhysicsSprite3D_syncPhysicsToNode);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_PhysicsSprite3D_getPhysicsObj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_PhysicsSprite3D_setSyncFlag);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_PhysicsSprite3D_PhysicsSprite3D);

extern se::Object* __jsb_cocos2d_Physics3DWorld_proto;
extern se::Class* __jsb_cocos2d_Physics3DWorld_class;

bool js_register_cocos2d_Physics3DWorld(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_setGravity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_stepSimulate);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_needCollisionChecking);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_collisionChecking);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_setGhostPairCallback);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_init);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_removeAllPhysics3DObjects);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_isDebugDrawEnabled);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_removeAllPhysics3DConstraints);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_getGravity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_removePhysics3DConstraint);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_addPhysics3DObject);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_setDebugDrawEnable);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_removePhysics3DObject);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_getPhysicsObject);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_addPhysics3DConstraint);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_debugDraw);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_sweepShape);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_create);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DWorld_Physics3DWorld);

extern se::Object* __jsb_cocos2d_Physics3DConstraint_proto;
extern se::Class* __jsb_cocos2d_Physics3DConstraint_class;

bool js_register_cocos2d_Physics3DConstraint(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_setEnabled);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_setBreakingImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_getUserData);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_getBreakingImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_getBodyA);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_isEnabled);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_getOverrideNumSolverIterations);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_getBodyB);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_setOverrideNumSolverIterations);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_getConstraintType);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_setUserData);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConstraint_getbtContraint);

extern se::Object* __jsb_cocos2d_Physics3DPointToPointConstraint_proto;
extern se::Class* __jsb_cocos2d_Physics3DPointToPointConstraint_class;

bool js_register_cocos2d_Physics3DPointToPointConstraint(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DPointToPointConstraint_getPivotPointInA);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DPointToPointConstraint_getPivotPointInB);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DPointToPointConstraint_init);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DPointToPointConstraint_setPivotPointInA);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DPointToPointConstraint_setPivotPointInB);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DPointToPointConstraint_create);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DPointToPointConstraint_Physics3DPointToPointConstraint);

extern se::Object* __jsb_cocos2d_Physics3DHingeConstraint_proto;
extern se::Class* __jsb_cocos2d_Physics3DHingeConstraint_class;

bool js_register_cocos2d_Physics3DHingeConstraint(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getHingeAngle);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getMotorTargetVelosity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getFrameOffsetA);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getFrameOffsetB);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_setMaxMotorImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_enableAngularMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getUpperLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getMaxMotorImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getLowerLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_setUseFrameOffset);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getEnableAngularMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_enableMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getBFrame);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_setFrames);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getUseFrameOffset);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_setAngularOnly);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_setLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_setMotorTarget);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getAngularOnly);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_setAxis);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_getAFrame);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_create);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DHingeConstraint_Physics3DHingeConstraint);

extern se::Object* __jsb_cocos2d_Physics3DSliderConstraint_proto;
extern se::Class* __jsb_cocos2d_Physics3DSliderConstraint_class;

bool js_register_cocos2d_Physics3DSliderConstraint(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setPoweredAngMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getDampingLimAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setRestitutionOrthoLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setRestitutionDirLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getLinearPos);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getFrameOffsetA);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getFrameOffsetB);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setPoweredLinMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getDampingDirAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getRestitutionLimLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getSoftnessOrthoAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setSoftnessOrthoLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setSoftnessLimLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getAngularPos);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setRestitutionLimAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setUpperLinLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setDampingDirLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getUpperAngLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getDampingDirLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getSoftnessDirAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getPoweredAngMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setLowerAngLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setUpperAngLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setTargetLinMotorVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setDampingLimAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getRestitutionLimAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getUseFrameOffset);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getSoftnessOrthoLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getDampingOrthoAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setUseFrameOffset);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setLowerLinLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getRestitutionDirLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getTargetLinMotorVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getLowerLinLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getSoftnessLimLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setDampingOrthoAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setSoftnessDirAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getPoweredLinMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setRestitutionOrthoAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setDampingDirAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setFrames);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getRestitutionOrthoAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getMaxAngMotorForce);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getDampingOrthoLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getUpperLinLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setMaxLinMotorForce);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getRestitutionOrthoLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setTargetAngMotorVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getSoftnessLimAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setRestitutionDirAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getDampingLimLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getLowerAngLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getRestitutionDirAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getTargetAngMotorVelocity);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setRestitutionLimLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getMaxLinMotorForce);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setDampingOrthoLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setSoftnessOrthoAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setDampingLimLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setSoftnessDirLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setMaxAngMotorForce);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getSoftnessDirLin);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_setSoftnessLimAng);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_getUseLinearReferenceFrameA);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_create);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DSliderConstraint_Physics3DSliderConstraint);

extern se::Object* __jsb_cocos2d_Physics3DConeTwistConstraint_proto;
extern se::Class* __jsb_cocos2d_Physics3DConeTwistConstraint_class;

bool js_register_cocos2d_Physics3DConeTwistConstraint(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getBFrame);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_setFixThresh);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getFrameOffsetB);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getFrameOffsetA);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getFixThresh);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getSwingSpan2);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getSwingSpan1);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_setMaxMotorImpulse);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_setFrames);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getTwistAngle);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_GetPointForAngle);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_setMaxMotorImpulseNormalized);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getTwistSpan);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_setDamping);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_setLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_getAFrame);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_enableMotor);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_create);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3DConeTwistConstraint_Physics3DConeTwistConstraint);

extern se::Object* __jsb_cocos2d_Physics3D6DofConstraint_proto;
extern se::Class* __jsb_cocos2d_Physics3D6DofConstraint_class;

bool js_register_cocos2d_Physics3D6DofConstraint(se::Object* obj);
bool register_all_cocos2dx_physics3d(se::Object* obj);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_setLinearLowerLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_getLinearLowerLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_getAngularUpperLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_getUseFrameOffset);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_getLinearUpperLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_setAngularLowerLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_isLimited);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_setUseFrameOffset);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_setLinearUpperLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_getAngularLowerLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_setAngularUpperLimit);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_create);
SE_DECLARE_FUNC(js_cocos2dx_physics3d_Physics3D6DofConstraint_Physics3D6DofConstraint);

#endif //#if CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION
